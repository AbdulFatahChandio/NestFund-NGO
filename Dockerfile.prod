# ------------------------------
# Stage 1: Build the application
# ------------------------------
FROM node:24-alpine AS build

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json (if exists) first
# This allows Docker to cache npm install if dependencies haven't changed
COPY package*.json ./

# Install all dependencies (including devDependencies for building)
RUN npm install

# Copy the entire application code
COPY . .

# Generate Prisma client so TypeScript can use @prisma/client types
RUN npx prisma generate

# Build the NestJS application (outputs JS files to /app/dist)
RUN npm run build

# ------------------------------
# Stage 2: Production image
# ------------------------------
FROM node:24-alpine AS production

# Set working directory
WORKDIR /app

# Copy only necessary files for runtime
COPY package*.json ./

# Install only production dependencies (no devDependencies)
RUN npm install --only=production

# Copy build output (compiled dist) from build stage
COPY --from=build /app/dist ./dist

# Copy generated Prisma client from build stage
COPY --from=build /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=build /app/node_modules/@prisma ./node_modules/@prisma

# Start the application in production mode
CMD ["npm", "run", "start:prod"]
